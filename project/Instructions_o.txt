@0
1000010000000000000001 // Load in value: "1" || #0
1000110000000000000000 // Load Register0 value to ACC || #1
1001000000000000100000 // Store right condition to Reg[5] || #2
1000010000000000000001 // Load in value: "1" || #3
1000110000000000000000 // Load Register0 value to ACC || #4
0000110000000000000101 // Sub for comparison ( left - right ) || #5
0101000000000000001000 // || JUMP Z operation || #6
0100110000000000100100 // JUMP operation || #7
1000010000000010111111 // Load in value: "191" || #8
1000110000000000000000 // Load Register0 value to ACC || #9
1110110000000000000000 // Set StackPointer with ACC || #10
1000010000000001000000 // Load in value: "64" || #11
1000110000000000000000 // Load Register0 value to ACC || #12
1000000000000000000000 // Store 64 to var:Mem[0] || #13
1000010000000000000001 // Load in value: "1" || #14
1000110000000000000000 // Load Register0 value to ACC || #15
1001000000000000100000 // Store right condition to Reg[5] || #16
0111110000000000000000 // Load Mem[0] to ACC || #17
0000110000000000000101 // Sub for comparison ( left - right ) || #18
0101000000000000011110 //|| JUMP Z operation || #19
0101100000000000011110 //|| JUMP C operation || #20
0111110000000000000000 // Load Mem[0] to ACC || #21
1111000000000000000000 // Assign Value to Tabloo(SP) column || #22
1000010000000000000001 // Load in value: "1" || #23
1000110000000000000000 // Load Register0 value to ACC || #24
1001000000000010000000 // Store ACC to Reg[7] || #25
0111110000000000000000 // Load Mem[0] to ACC || #26
0000110000000000000111 // Sub Reg[7] from ACC || #27
1000000000000000000000 // Store var to var:Mem[0] || #28
0100110000000000001110 // JUMP operation || #29
1000010000000000000001 // Load in value: 1 || #30
1000110000000000000000 // Load Register0 value to ACC || #31
0111110000000010111110 // Mem[190] = 1 -- Refresh Tabloo enable || #32
0111000000000000000000 // Clear ACC || #33
0111110000000010111110 // Mem[190] = 0 || #34
0100110000000000000000 // JUMP operation || #35
1111110000000000000000 // END / HALT
